{arguments[0] = arguments[0].trim();}
start =
   a:statement b:statements { return [a].concat(b); }
   / expression / '' { return undefined; }

expression =
  comparative

comma_expression =
  "," ws expr:expression
    { return expr; }

identifier
    = firstchar:[a-zA-Z_] chars:[0-9a-zA-Z_]*
        { return firstchar + chars.join(''); }

ws = /* whitespace */
   [ \r\n\f\t]* 


/***************/
/*** numbers ***/
/***************/

singleDigitNumber = 
    a:[0-9] { return parseInt(a); }

multiDigitNumber = 
    a:[1-9] b:[0-9]+ { return parseInt(a+b.join('')); }

naturalNumber =
    a:(multiDigitNumber / singleDigitNumber) { return parseInt(a); }

integer = 
    sign:('+'/'-')? n:naturalNumber { return parseInt(sign+n); }
    
decimal =
   "." x:[0-9]+ { return parseFloat('0.'+x.join('')); }

realNumber =
    decimal_part:decimal 
    / 
    (int_part:integer decimal_part:decimal)
       { return int_part + decimal_part * (int_part >= 0 ? 1 : -1); }

number = 
  realNumber / integer

/***************/


/****************************/
/*** comparison operators ***/
/****************************/

comp_op = "<=" / ">=" / "!=" / "==" / "<" / ">"

comparative
    = left:additive ws op:comp_op ws right:comparative
        { return {tag: op, left:left, right:right}; }
    / additive

/****************************/


/******************************/
/*** arithmetic expressions ***/
/******************************/

additive_op = "+" / "-"

additive
    = left:multiplicative ws op:additive_op ws right:additive
        { return {tag:op, left:left, right:right}; }
    / multiplicative

mult_op = "*" / "/"

multiplicative
    = left:primary ws op:mult_op ws right:multiplicative
        { return {tag:op, left:left, right:right}; }
    / primary

/******************************/


/**********************/
/*** function calls ***/
/**********************/

arglist
    = first:expression rest:comma_expression*
        { return [first].concat(rest); }

/**********************/


/******************/
/*** statements ***/
/******************/

statements = statement*

declaration = 
   "var"[ \r\n\f\t]+ v:identifier ws ';' { return v; }

statement
    = 
      v:declaration
        { return {tag:'var',name:v}; }
      /
      v:identifier ws ":=" ws expr:expression ws ";"
        { return { tag:":=", left:v, right:expr }; }
      /
      "if" ws "(" ws e:expression ws ")" ws "{" b:statements ws "}"
        { return {tag:'if',expr:e,body:b} }
      /
      "repeat" ws "(" ws e:expression ws ")" ws "{" v:statements "}"
        { return {tag:'repeat',expr:e,body:v};}
      /
      "define " ws v:identifier ws "(" ws ")" ws
      "{" ws body:statements ws "}" ws
        
        { return { tag:"define", name:v, args:[], body:body }; }
      /
      "define " ws v:identifier ws "(" ws args:ident_list ws ")" ws
      "{" ws body:statements ws "}" ws
          
        { return { tag:"define", name:v, args:args, body:body }; }
  
comma_identifier = "," ws v:identifier
        { return v; }

ident_list
    = first:identifier ws rest:comma_identifier*
        { return [first].concat(rest); }

/******************/

primary
    = number
    / "(" ws expr:additive ws ")"
        { return expr; }
    / v:identifier "(" ws ")"
        { return {tag:"call", name:v, args:[]}; }
    / v:identifier "(" ws args:arglist ws ")"
        { return {tag:"call", name:v, args:args}; }
    / "(" ws expr:expression ws ")"
        { return expr; }
    / v:identifier
      { return {tag:"ident",name:v}; }