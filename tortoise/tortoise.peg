{arguments[0] = arguments[0].trim();}
start =
   expression / '' { return undefined; }

expression =
  number / identifier

/***************/
/*** numbers ***/
/***************/

singleDigitNumber = 
    a:[0-9] { return parseInt(a); }

multiDigitNumber = 
    a:[1-9] b:[0-9]+ { return parseInt(a+b.join('')); }

naturalNumber =
    a:(multiDigitNumber / singleDigitNumber) { return parseInt(a); }

integer = 
    sign:('+'/'-')? n:naturalNumber { return parseInt(sign+n); }
    
decimal =
   "." x:[0-9]+ { return parseFloat('0.'+x.join('')); }

realNumber =
    decimal_part:decimal 
    / 
    (int_part:integer decimal_part:decimal)
       { return int_part + decimal_part * (int_part >= 0 ? 1 : -1); }

number = 
  realNumber / integer

/***************/

identifier
    = firstchar:[a-zA-Z_] chars:[0-9a-zA-Z_]*
        { return firstchar + chars.join(''); }
